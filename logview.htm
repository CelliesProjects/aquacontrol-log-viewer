<!doctype HTML>
<html lang="en">
<head>
<title>Temperature</title>
<meta charset="utf-8">
<link rel="icon" href="data:;base64,iVBORw0KGgo=">  <!--prevent favicon requests-->
<script>
/* ip addresses or dns names */
const controllers = [ "https://vissen.wasietsmet.nl",
                      "https://salamanders.wasietsmet.nl" ];
/* names to display on button */
const locations   = [ "vissen",
                      "salamanders" ];
const sensorColor = ["","rgba( 255,0, 0, 0.9)","rgba( 0,255,0, 0.9)","rgba( 0,0,255, 0.9)"];
</script>
<style>
html, body{
  margin:0 auto;
  background-color:grey;
  text-align:center;
  width:1024px;
	font-variant: small-caps;
  font-size:20px;
}
a {
  color: black;
  text-decoration: none;
  margin: 0 10px;
}
h3{
  margin:0;
}
.systemLink{
  padding: 3px 10px;
}
.systemLink:hover {
  background:grey;
}
p{
  margin:0;
}
.shadowedBox {
  box-shadow: 0px 0px 13px 0px rgba(0,0,0,1);
  border:solid 1px black;
  border-radius: 15px;
  margin:10px 0;
  overflow:hidden;
}
#editorCanvas{
  background-color:darkgreen;
  border:solid 1px black;
  display:inline-block;
  float:left;
  margin:0;
}
#sideBox{
  width:210px;
  height:400px;
  border:solid 1px black;
  background-color:green;
  float:right;
  overflow:hidden;
  margin:0;
}
.controlBox, #locationBox {
  margin: 10px;
  background-color: antiquewhite;
  padding: 5px 0 0;
  font-size:initial;
}
#locationBox{
  padding:0;
}
.controlBox{
  display:none;
}
#fileList{
  height:140px;
  overflow-y:auto;
  width:100%;
}
.logFile{
  margin:auto;
}
.logFile:hover{
  background-color: yellow;
  cursor:pointer;
}
button:hover{
  cursor:pointer;
}
.rangeButton, .baseButton{
  width:50%;
  //height:30px;
}
.locationButton{
  width:100%;
  height:30px;;
}
.sensorItem{
  display:inline;
}
</style>
<script src="https://code.jquery.com/jquery-3.2.1.js"></script>
<body>
<div class="shadowedBox">Aquacontrol log viewer</div>
<div class="shadowedBox"><h3 id="locationName">CHOOSE A LOCATION</h3></div>
<canvas class="shadowedBox" id="editorCanvas" width="800px" height="400px"></canvas>
  <div id="sideBox" class="shadowedBox">
    <div class="shadowedBox" id="locationBox"></div>
    <div class="shadowedBox controlBox">
    <p class="sensorItem">CENTER:</p>
    <p id="baseStatus" class="sensorItem">base</p>
    <p><button class="baseButton sensorItem">CENTER-</button><button class="baseButton sensorItem">CENTER+</button></p>
    </div>
    <div class="shadowedBox controlBox">
    <p class="sensorItem">RANGE:</p>
    <p id="rangeStatus" class="sensorItem">range</p>
    <p><button class="rangeButton sensorItem">RANGE-</button><button class="rangeButton sensorItem">RANGE+</button></p>
    </div>
    <div id="fileList"></div>
  </div>
<script>
var currentHost = '';
var grapArea = document.getElementById( 'editorCanvas' );
var rangeBottom = 10;
var rangeTop = 30;
var sensorNames = [];
var measurements = [];
$( document ).ready( function() {
  locations.forEach(function( item, index )
  {
    $('#locationBox').append( '<button class="locationButton">' + item + '</button>' );
  });
  var ctx = grapArea.getContext( "2d" );
  ctx.textBaseline="middle";
  ctx.textAlign="center";
  ctx.strokeStyle = 'white';
  ctx.font = '30px serif';
  ctx.strokeText( "GREETINGS EARTHLING!", grapArea.width / 2,  grapArea.height / 3  );
  ctx.strokeText( "PICK A LOCATION TO COMMENCE PROCEEDINGS...", grapArea.width / 2,  grapArea.height / 2  );
});
function map( x,  in_min,  in_max,  out_min,  out_max)
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
function setNewHost()
{
  sensorNames = [];
  $.get( currentHost + '/api/getdevice?files=')
  .done( function( data )
  {
    var fileArray = data.split('\n');
    fileArray.sort();
    $('#fileList').html( '' );
    for ( f = 0; f < fileArray.length; f++ )
    {
      if ( fileArray[f].substring( 11, 15 ) == '.log' )
      {
        $('#fileList').append( '<div class="logFile">'+ fileArray[f].substring( 1, 11 ) + "</div>" );
      }
    }
    $('.logFile').last().click();
    var mydiv = $('#fileList')
    mydiv.scrollTop(mydiv.prop("scrollHeight"));
  })
  .fail( function( data )
  {
    console.log( "something went wrong" );
  });
}
function showAllChannelColors()
{
  var currentSensor = 1;
  while ( sensorNames[ currentSensor ] )
  {
    showChannelColor( currentSensor );
    currentSensor++;
  }
}
function showChannelColor( sensor )
{
  var ctx = grapArea.getContext( "2d" );
  ctx.textBaseline="middle";
  ctx.textAlign="left";
  ctx.strokeStyle = sensorColor[ sensor ];
  ctx.strokeText( sensorNames[ sensor ], 75,  grapArea.height - 40 - ( sensor ) * 20  );
  ctx.beginPath();
  ctx.strokeStyle = sensorColor[ sensor ];
  ctx.moveTo( 30, grapArea.height - 40 - sensor  * 20  );
  ctx.lineTo( 70, grapArea.height - 40 - sensor  * 20  );
  ctx.stroke();
}
function drawLogFile( url )
{
  $.get( url, function( data )
  {
    measurements = data.split('\n');
    var bootCount = 0;
    var numberOfMeasurements = 0;
    measurements.forEach( function( item, index )
    {
      if ( item.indexOf( 'Aquacontrol32 start' ) > 0  )
      {
       bootCount++;
      }
      else if ( item )
      {
        numberOfMeasurements++;
      }
    });
    if ( numberOfMeasurements )
    {
      $('.controlBox').show();
      showRange();
      showBase();
      drawAllGraphs();
    }
    var ctx = grapArea.getContext( "2d" );
    if ( !numberOfMeasurements )
    {
      ctx.textBaseline="middle";
      ctx.textAlign="center";
      ctx.font = '20px serif';
      ctx.strokeStyle = 'rgba( 255, 255, 255, 1 )';
      ctx.strokeText( "No sensor data found", grapArea.width / 2,  grapArea.height / 2 );
    }
    else
    {
      $.get( currentHost + '/api/getdevice?status=', function( data )
      {
        var statusData = data.split( '\n' );
        var offset = 7;
        while ( statusData[ offset ] )
        {
          var sensorData = statusData[ offset ].split(',');
          sensorNames[ offset - 6 ] = sensorData[0];
          showChannelColor( offset - 6 );
          offset++;
        }
      });
    }

    if ( bootCount )
    {
      url += " - System reboots: " + bootCount;
    }
    ctx.textBaseline="bottom";
    ctx.textAlign="left";
    ctx.font = '15px serif';
    ctx.strokeStyle = 'rgba( 255, 255, 255, 0.9 )';
    ctx.strokeText( url, 10,  grapArea.height - 10 );
  });
}
function drawSingleChannel( sensor, data, canvas, color, mintemp, maxtemp, drawGrid )
{
  const opacity = 0.3;
  const lineDash = [ 2, 2 ];
  var ctx = canvas.getContext( "2d" );
  ctx.beginPath();
  if ( drawGrid )
  {
    ctx.strokeStyle = 'rgba( 255, 165, 0, ' + opacity + ')';
    ctx.font = '15px serif';
    for ( hour = 0; hour < 25; hour++ )
    {
      var x = map( hour, 0, 24, 0, canvas.width );
      ctx.moveTo( x, 0 );
      ctx.lineTo( x, canvas.height );
      ctx.setLineDash([]);
      ctx.textBaseline="middle";
      ctx.textAlign="center";
      ctx.strokeText( hour + "h", x, 10 );
      ctx.strokeText( hour + "h", x, canvas.height / 2 );
      ctx.strokeText( hour + "h", x, canvas.height - 10 );
      ctx.setLineDash( lineDash );
    }
    ctx.stroke();
    ctx.beginPath();
    ctx.strokeStyle = 'rgba( 255,255,255, '+ opacity+ ')';
    for ( templine = rangeBottom; templine <= rangeTop; templine++ )
    {
      var y = map( templine, rangeBottom, rangeTop, canvas.height, 0 );
      ctx.moveTo( 0, y );
      ctx.lineTo( canvas.width, y );
      var tempstr = parseInt( map( y, 0, canvas.height, maxtemp, mintemp ) );
      tempstr += "째";
      ctx.setLineDash([]);
      ctx.textBaseline="middle";
      ctx.textAlign="center";
      ctx.strokeText( tempstr, 20, y );
      ctx.strokeText( tempstr, canvas.width / 2, y );
      ctx.strokeText( tempstr, canvas.width - 20, y );
      ctx.setLineDash( lineDash) ;
    }
    ctx.stroke();
    ctx.beginPath();
  }
  ctx.setLineDash([]);
  ctx.strokeStyle = color;
  /* draw the actual graph */
  var closeLine = true;
  for ( p = 0; p < data.length; p++ )
  {
    var temp = data[ p ].split(',');
    var date = new Date( temp[0] * 1000 );

    if ( isNaN( date.getTime() ) )
    {
      closeLine = true;
    }
    else
    {
      var secondsToday = date.getHours() * 3600;
      secondsToday += date.getMinutes() * 60;
      secondsToday += date.getSeconds();
      var y = map( temp[ sensor ], mintemp, maxtemp, canvas.height, 0 );
      var x = map( secondsToday, 0, 86400, 0, canvas.width );
      if ( closeLine )
      {
        ctx.moveTo( x, y );
        closeLine = false;
      }
      ctx.lineTo( x, y );
    }
  }
  ctx.stroke();
}
$('#sideBox').on( 'click', '.logFile', function()
{
  if ( $(this).css( "background-color" ) == "rgb(0, 100, 0)" ) return;
  $( '.logFile' ).css( { "background-color" : "" } );
  $(this).css( { "background-color" : "rgb(0, 100, 0)" } );
  var newurl = currentHost + '/';
  newurl += $( this ).html() + '.log';
  drawLogFile( newurl );
  var d = new Date( $(this).html() );
  var s = d.toDateString()
  $( "#locationName" ).html( s.substring(0, 15) );
});
function showRange()
{
  $('#rangeStatus').html(  rangeBottom + "째 - " + rangeTop  + "째" );
}
$('.rangeButton').on( 'click', function()
{
  if ( $(this).index() == 0 )
  {
    rangeBottom++;
    rangeTop--;
  } else
  {
    rangeBottom--;
    rangeTop++;
  }
  showRange();
  drawAllGraphs();
});
function showBase()
{
  $('#baseStatus').html( ( rangeTop - ( rangeTop - rangeBottom ) / 2 ) + "째" );
}
$('.baseButton').on( 'click', function()
{
  if ( $(this).index() == 0 )
  {
    rangeBottom--;
    rangeTop--;
  } else
  {
    rangeBottom++;
    rangeTop++;
  }
  showBase();
  showRange();
  drawAllGraphs();
});
function drawAllGraphs()
{
  var ctx = grapArea.getContext( "2d" );
  ctx.clearRect(0, 0, grapArea.width, grapArea.height);
  drawSingleChannel( 1, measurements, grapArea, sensorColor[1], rangeBottom, rangeTop, true );
  drawSingleChannel( 2, measurements, grapArea, sensorColor[2], rangeBottom, rangeTop, false );
  drawSingleChannel( 3, measurements, grapArea, sensorColor[3], rangeBottom, rangeTop, false );
  showAllChannelColors();
}
$( '#sideBox' ).on( 'click' ,'.locationButton', function()
{
  const activeColor = "#ccff99";
  if ( $(this).css( "background-color" ) == activeColor ) return;
  $( '.locationButton' ).css( { "background-color" : "" } );
  $( this ).css( { "background-color" : activeColor } );
  currentHost = controllers[ $(this).index() ];
  setNewHost();
});
</script>
</body>
</html>
